-----------------------------------------------------------------------------
                 Primme.py: A Python Interface for PRIMME
   
                Copyright (C) 2015 College of William & Mary,
   James R. McCombs, Eloy Romero Alcalde, Andreas Stathopoulos, Lingfei Wu
-----------------------------------------------------------------------------
 
   This file is part of PRIMME.

   PRIMME is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   PRIMME is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


-----------------------------------------------------------------------------

Primme.py is a Python interface for the free software PRIMME (PReconditioned
Iterative MultiMethod Eigensolver), which finds a number of eigenvalues and 
their corresponding eigenvectors of a real symmetric, or complex hermitian
matrix A. It is a useful tool for both non-experts and experts to easily 
call PRIMME. Largest, smallest and interior eigenvalues are supported. 
Preconditioning can be used to accelerate convergence. 

-----------------------------------------------------------------------------
1.	Directory Structure 
-----------------------------------------------------------------------------
PRIMME/PYTHON/

> ls 
readme.txt            <- this file
Makefile              <- make with actions to build, test and clean
numpy.i and
pyfragments.swg       <- SWIG files distributed by Numpy (in dir tools/swig)
primme.i              <- SWIG file with PRIMME interface description
primmew.h and
primmew.cxx           <- C++ class encapsulating primme_params
primme_wrap.h and
primme_wrap.cxx and
Python.py             <- files generated by primme.i
_Primme.so (generated)<- shared library with PRIMME and PYTHON interface
setup.py              <- disutils script to build _Primme.so
test.py               <- simple test

-----------------------------------------------------------------------------
2. _Primme.so compilation 
-----------------------------------------------------------------------------

The python interface is composed by Primme.py and _Primme.so. Follow this
instruction to build _Primme.so.

Previously, make sure that libprimme.a is suitable for dynamic linking (i.e.,
it has been compiled with -fPIC). For instance do the following on the root
directory of PRIMME:

  make clean lib CFLAGS="-fPIC -O2"

After that, execute one of the following commands.

a) To generate _Primme.so in the current working path do:

   make all

or

   python setup.py build_ext -i

b) To install Primme with other python packages do:

   python setup.py install

To verify the installation try to run the example:

   python test1.py

-----------------------------------------------------------------------------
3. Interface description
-----------------------------------------------------------------------------

- class Primme.primme_params_w:
    Contains all fields in primme_params excepts matrix, massMatrix,
    preconditioner, matrixMatvec and applyPreconditioner.

    method matvec()
      Matrix-vector product (replace matrixMatvec).
      User should implement the method.

    method prevec()
      Preconditioner application (replace applyPreconditioner).
      User should implement the method.

    method display()
      Print the content of the fields in the same way as primme_display().

    method set_method(method)
      Set one of methods Primme.DYNAMIC, Primme.DEFAULT_MIN_TIME...

- method Primme.dprimme(evals, evecs, rnorms, pp) -> int
      Compute the eigenpairs as described in pp.
      
      Arguments:
      - evals: Numpy.array (double) of length pp.numEvals; return the computed
        eigenvalues.
      - evecs: Numpy.array (double) of size pp.n by pp.numEvals; on input, it
        contains the orthogonal constrains and the initial vectors; on return,
        it holds the approximated eigenvectors.
      - rnorms: Numpy.array (double) of length pp.numEvals; return the residual
        of the computed eigenpairs.
      - pp: Primme.primme_params_w object; contains the PRIMME parameters used
        by the solver to solve the problem.
      
      return an int with the error code.

- method Primme.zprimme(evals, evecs, rnorms, pp) -> int
      Compute the eigenpairs as described in pp.
      
      Arguments:
      - evals: Numpy.array (double) of length pp.numEvals; return the computed
        eigenvalues.
      - evecs: Numpy.array (complex) of size pp.n by pp.numEvals; on input, it
        contains the orthogonal constrains and the initial vectors; on return,
        it holds the approximated eigenvectors.
      - rnorms: Numpy.array (double) of length pp.numEvals; return the residual
        of the computed eigenpairs.
      - pp: Primme.primme_params_w object; contains the PRIMME parameters used
        by the solver to solve the problem.
      
      return an int with the error code.
