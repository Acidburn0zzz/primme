# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Primme', [dirname(__file__)])
        except ImportError:
            import _Primme
            return _Primme
        if fp is not None:
            try:
                _mod = imp.load_module('_Primme', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Primme = swig_import_helper()
    del swig_import_helper
else:
    import _Primme
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x



_Primme.Primme_dprimme_swigconstant(_Primme)
Primme_dprimme = _Primme.Primme_dprimme

_Primme.Primme_zprimme_swigconstant(_Primme)
Primme_zprimme = _Primme.Primme_zprimme

_Primme.Primme_check_input_swigconstant(_Primme)
Primme_check_input = _Primme.Primme_check_input

_Primme.Primme_allocate_workspace_swigconstant(_Primme)
Primme_allocate_workspace = _Primme.Primme_allocate_workspace

_Primme.Primme_main_iter_swigconstant(_Primme)
Primme_main_iter = _Primme.Primme_main_iter

_Primme.Primme_init_basis_swigconstant(_Primme)
Primme_init_basis = _Primme.Primme_init_basis

_Primme.Primme_init_block_krylov_swigconstant(_Primme)
Primme_init_block_krylov = _Primme.Primme_init_block_krylov

_Primme.Primme_init_krylov_swigconstant(_Primme)
Primme_init_krylov = _Primme.Primme_init_krylov

_Primme.Primme_ortho_swigconstant(_Primme)
Primme_ortho = _Primme.Primme_ortho

_Primme.Primme_solve_h_swigconstant(_Primme)
Primme_solve_h = _Primme.Primme_solve_h

_Primme.Primme_restart_swigconstant(_Primme)
Primme_restart = _Primme.Primme_restart

_Primme.Primme_restart_h_swigconstant(_Primme)
Primme_restart_h = _Primme.Primme_restart_h

_Primme.Primme_insert_submatrix_swigconstant(_Primme)
Primme_insert_submatrix = _Primme.Primme_insert_submatrix

_Primme.Primme_lock_vectors_swigconstant(_Primme)
Primme_lock_vectors = _Primme.Primme_lock_vectors

_Primme.Primme_num_dsyev_swigconstant(_Primme)
Primme_num_dsyev = _Primme.Primme_num_dsyev

_Primme.Primme_num_zheev_swigconstant(_Primme)
Primme_num_zheev = _Primme.Primme_num_zheev

_Primme.Primme_num_dspev_swigconstant(_Primme)
Primme_num_dspev = _Primme.Primme_num_dspev

_Primme.Primme_num_zhpev_swigconstant(_Primme)
Primme_num_zhpev = _Primme.Primme_num_zhpev

_Primme.Primme_ududecompose_swigconstant(_Primme)
Primme_ududecompose = _Primme.Primme_ududecompose

_Primme.Primme_udusolve_swigconstant(_Primme)
Primme_udusolve = _Primme.Primme_udusolve

_Primme.Primme_apply_projected_preconditioner_swigconstant(_Primme)
Primme_apply_projected_preconditioner = _Primme.Primme_apply_projected_preconditioner

_Primme.Primme_apply_skew_projector_swigconstant(_Primme)
Primme_apply_skew_projector = _Primme.Primme_apply_skew_projector

_Primme.Primme_inner_solve_swigconstant(_Primme)
Primme_inner_solve = _Primme.Primme_inner_solve

_Primme.Primme_solve_correction_swigconstant(_Primme)
Primme_solve_correction = _Primme.Primme_solve_correction

_Primme.Primme_fopen_swigconstant(_Primme)
Primme_fopen = _Primme.Primme_fopen

_Primme.Primme_malloc_swigconstant(_Primme)
Primme_malloc = _Primme.Primme_malloc

_Primme.primme_smallest_swigconstant(_Primme)
primme_smallest = _Primme.primme_smallest

_Primme.primme_largest_swigconstant(_Primme)
primme_largest = _Primme.primme_largest

_Primme.primme_closest_geq_swigconstant(_Primme)
primme_closest_geq = _Primme.primme_closest_geq

_Primme.primme_closest_leq_swigconstant(_Primme)
primme_closest_leq = _Primme.primme_closest_leq

_Primme.primme_closest_abs_swigconstant(_Primme)
primme_closest_abs = _Primme.primme_closest_abs

_Primme.primme_thick_swigconstant(_Primme)
primme_thick = _Primme.primme_thick

_Primme.primme_dtr_swigconstant(_Primme)
primme_dtr = _Primme.primme_dtr

_Primme.primme_full_LTolerance_swigconstant(_Primme)
primme_full_LTolerance = _Primme.primme_full_LTolerance

_Primme.primme_decreasing_LTolerance_swigconstant(_Primme)
primme_decreasing_LTolerance = _Primme.primme_decreasing_LTolerance

_Primme.primme_adaptive_ETolerance_swigconstant(_Primme)
primme_adaptive_ETolerance = _Primme.primme_adaptive_ETolerance

_Primme.primme_adaptive_swigconstant(_Primme)
primme_adaptive = _Primme.primme_adaptive
class primme_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, primme_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, primme_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numOuterIterations"] = _Primme.primme_stats_numOuterIterations_set
    __swig_getmethods__["numOuterIterations"] = _Primme.primme_stats_numOuterIterations_get
    if _newclass:
        numOuterIterations = _swig_property(_Primme.primme_stats_numOuterIterations_get, _Primme.primme_stats_numOuterIterations_set)
    __swig_setmethods__["numRestarts"] = _Primme.primme_stats_numRestarts_set
    __swig_getmethods__["numRestarts"] = _Primme.primme_stats_numRestarts_get
    if _newclass:
        numRestarts = _swig_property(_Primme.primme_stats_numRestarts_get, _Primme.primme_stats_numRestarts_set)
    __swig_setmethods__["numMatvecs"] = _Primme.primme_stats_numMatvecs_set
    __swig_getmethods__["numMatvecs"] = _Primme.primme_stats_numMatvecs_get
    if _newclass:
        numMatvecs = _swig_property(_Primme.primme_stats_numMatvecs_get, _Primme.primme_stats_numMatvecs_set)
    __swig_setmethods__["numPreconds"] = _Primme.primme_stats_numPreconds_set
    __swig_getmethods__["numPreconds"] = _Primme.primme_stats_numPreconds_get
    if _newclass:
        numPreconds = _swig_property(_Primme.primme_stats_numPreconds_get, _Primme.primme_stats_numPreconds_set)
    __swig_setmethods__["elapsedTime"] = _Primme.primme_stats_elapsedTime_set
    __swig_getmethods__["elapsedTime"] = _Primme.primme_stats_elapsedTime_get
    if _newclass:
        elapsedTime = _swig_property(_Primme.primme_stats_elapsedTime_get, _Primme.primme_stats_elapsedTime_set)

    def __init__(self):
        this = _Primme.new_primme_stats()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Primme.delete_primme_stats
    __del__ = lambda self: None
primme_stats_swigregister = _Primme.primme_stats_swigregister
primme_stats_swigregister(primme_stats)

class JD_projectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JD_projectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JD_projectors, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LeftQ"] = _Primme.JD_projectors_LeftQ_set
    __swig_getmethods__["LeftQ"] = _Primme.JD_projectors_LeftQ_get
    if _newclass:
        LeftQ = _swig_property(_Primme.JD_projectors_LeftQ_get, _Primme.JD_projectors_LeftQ_set)
    __swig_setmethods__["LeftX"] = _Primme.JD_projectors_LeftX_set
    __swig_getmethods__["LeftX"] = _Primme.JD_projectors_LeftX_get
    if _newclass:
        LeftX = _swig_property(_Primme.JD_projectors_LeftX_get, _Primme.JD_projectors_LeftX_set)
    __swig_setmethods__["RightQ"] = _Primme.JD_projectors_RightQ_set
    __swig_getmethods__["RightQ"] = _Primme.JD_projectors_RightQ_get
    if _newclass:
        RightQ = _swig_property(_Primme.JD_projectors_RightQ_get, _Primme.JD_projectors_RightQ_set)
    __swig_setmethods__["RightX"] = _Primme.JD_projectors_RightX_set
    __swig_getmethods__["RightX"] = _Primme.JD_projectors_RightX_get
    if _newclass:
        RightX = _swig_property(_Primme.JD_projectors_RightX_get, _Primme.JD_projectors_RightX_set)
    __swig_setmethods__["SkewQ"] = _Primme.JD_projectors_SkewQ_set
    __swig_getmethods__["SkewQ"] = _Primme.JD_projectors_SkewQ_get
    if _newclass:
        SkewQ = _swig_property(_Primme.JD_projectors_SkewQ_get, _Primme.JD_projectors_SkewQ_set)
    __swig_setmethods__["SkewX"] = _Primme.JD_projectors_SkewX_set
    __swig_getmethods__["SkewX"] = _Primme.JD_projectors_SkewX_get
    if _newclass:
        SkewX = _swig_property(_Primme.JD_projectors_SkewX_get, _Primme.JD_projectors_SkewX_set)

    def __init__(self):
        this = _Primme.new_JD_projectors()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Primme.delete_JD_projectors
    __del__ = lambda self: None
JD_projectors_swigregister = _Primme.JD_projectors_swigregister
JD_projectors_swigregister(JD_projectors)

class correction_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, correction_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, correction_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["precondition"] = _Primme.correction_params_precondition_set
    __swig_getmethods__["precondition"] = _Primme.correction_params_precondition_get
    if _newclass:
        precondition = _swig_property(_Primme.correction_params_precondition_get, _Primme.correction_params_precondition_set)
    __swig_setmethods__["robustShifts"] = _Primme.correction_params_robustShifts_set
    __swig_getmethods__["robustShifts"] = _Primme.correction_params_robustShifts_get
    if _newclass:
        robustShifts = _swig_property(_Primme.correction_params_robustShifts_get, _Primme.correction_params_robustShifts_set)
    __swig_setmethods__["maxInnerIterations"] = _Primme.correction_params_maxInnerIterations_set
    __swig_getmethods__["maxInnerIterations"] = _Primme.correction_params_maxInnerIterations_get
    if _newclass:
        maxInnerIterations = _swig_property(_Primme.correction_params_maxInnerIterations_get, _Primme.correction_params_maxInnerIterations_set)
    __swig_setmethods__["projectors"] = _Primme.correction_params_projectors_set
    __swig_getmethods__["projectors"] = _Primme.correction_params_projectors_get
    if _newclass:
        projectors = _swig_property(_Primme.correction_params_projectors_get, _Primme.correction_params_projectors_set)
    __swig_setmethods__["convTest"] = _Primme.correction_params_convTest_set
    __swig_getmethods__["convTest"] = _Primme.correction_params_convTest_get
    if _newclass:
        convTest = _swig_property(_Primme.correction_params_convTest_get, _Primme.correction_params_convTest_set)
    __swig_setmethods__["relTolBase"] = _Primme.correction_params_relTolBase_set
    __swig_getmethods__["relTolBase"] = _Primme.correction_params_relTolBase_get
    if _newclass:
        relTolBase = _swig_property(_Primme.correction_params_relTolBase_get, _Primme.correction_params_relTolBase_set)

    def __init__(self):
        this = _Primme.new_correction_params()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Primme.delete_correction_params
    __del__ = lambda self: None
correction_params_swigregister = _Primme.correction_params_swigregister
correction_params_swigregister(correction_params)

class restarting_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, restarting_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, restarting_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scheme"] = _Primme.restarting_params_scheme_set
    __swig_getmethods__["scheme"] = _Primme.restarting_params_scheme_get
    if _newclass:
        scheme = _swig_property(_Primme.restarting_params_scheme_get, _Primme.restarting_params_scheme_set)
    __swig_setmethods__["maxPrevRetain"] = _Primme.restarting_params_maxPrevRetain_set
    __swig_getmethods__["maxPrevRetain"] = _Primme.restarting_params_maxPrevRetain_get
    if _newclass:
        maxPrevRetain = _swig_property(_Primme.restarting_params_maxPrevRetain_get, _Primme.restarting_params_maxPrevRetain_set)

    def __init__(self):
        this = _Primme.new_restarting_params()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Primme.delete_restarting_params
    __del__ = lambda self: None
restarting_params_swigregister = _Primme.restarting_params_swigregister
restarting_params_swigregister(restarting_params)

class primme_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, primme_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, primme_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _Primme.primme_params_n_set
    __swig_getmethods__["n"] = _Primme.primme_params_n_get
    if _newclass:
        n = _swig_property(_Primme.primme_params_n_get, _Primme.primme_params_n_set)
    __swig_setmethods__["matrixMatvec"] = _Primme.primme_params_matrixMatvec_set
    __swig_getmethods__["matrixMatvec"] = _Primme.primme_params_matrixMatvec_get
    if _newclass:
        matrixMatvec = _swig_property(_Primme.primme_params_matrixMatvec_get, _Primme.primme_params_matrixMatvec_set)
    __swig_setmethods__["applyPreconditioner"] = _Primme.primme_params_applyPreconditioner_set
    __swig_getmethods__["applyPreconditioner"] = _Primme.primme_params_applyPreconditioner_get
    if _newclass:
        applyPreconditioner = _swig_property(_Primme.primme_params_applyPreconditioner_get, _Primme.primme_params_applyPreconditioner_set)
    __swig_setmethods__["massMatrixMatvec"] = _Primme.primme_params_massMatrixMatvec_set
    __swig_getmethods__["massMatrixMatvec"] = _Primme.primme_params_massMatrixMatvec_get
    if _newclass:
        massMatrixMatvec = _swig_property(_Primme.primme_params_massMatrixMatvec_get, _Primme.primme_params_massMatrixMatvec_set)
    __swig_setmethods__["numProcs"] = _Primme.primme_params_numProcs_set
    __swig_getmethods__["numProcs"] = _Primme.primme_params_numProcs_get
    if _newclass:
        numProcs = _swig_property(_Primme.primme_params_numProcs_get, _Primme.primme_params_numProcs_set)
    __swig_setmethods__["procID"] = _Primme.primme_params_procID_set
    __swig_getmethods__["procID"] = _Primme.primme_params_procID_get
    if _newclass:
        procID = _swig_property(_Primme.primme_params_procID_get, _Primme.primme_params_procID_set)
    __swig_setmethods__["nLocal"] = _Primme.primme_params_nLocal_set
    __swig_getmethods__["nLocal"] = _Primme.primme_params_nLocal_get
    if _newclass:
        nLocal = _swig_property(_Primme.primme_params_nLocal_get, _Primme.primme_params_nLocal_set)
    __swig_setmethods__["commInfo"] = _Primme.primme_params_commInfo_set
    __swig_getmethods__["commInfo"] = _Primme.primme_params_commInfo_get
    if _newclass:
        commInfo = _swig_property(_Primme.primme_params_commInfo_get, _Primme.primme_params_commInfo_set)
    __swig_setmethods__["globalSumDouble"] = _Primme.primme_params_globalSumDouble_set
    __swig_getmethods__["globalSumDouble"] = _Primme.primme_params_globalSumDouble_get
    if _newclass:
        globalSumDouble = _swig_property(_Primme.primme_params_globalSumDouble_get, _Primme.primme_params_globalSumDouble_set)
    __swig_setmethods__["numEvals"] = _Primme.primme_params_numEvals_set
    __swig_getmethods__["numEvals"] = _Primme.primme_params_numEvals_get
    if _newclass:
        numEvals = _swig_property(_Primme.primme_params_numEvals_get, _Primme.primme_params_numEvals_set)
    __swig_setmethods__["target"] = _Primme.primme_params_target_set
    __swig_getmethods__["target"] = _Primme.primme_params_target_get
    if _newclass:
        target = _swig_property(_Primme.primme_params_target_get, _Primme.primme_params_target_set)
    __swig_setmethods__["numTargetShifts"] = _Primme.primme_params_numTargetShifts_set
    __swig_getmethods__["numTargetShifts"] = _Primme.primme_params_numTargetShifts_get
    if _newclass:
        numTargetShifts = _swig_property(_Primme.primme_params_numTargetShifts_get, _Primme.primme_params_numTargetShifts_set)
    __swig_setmethods__["targetShifts"] = _Primme.primme_params_targetShifts_set
    __swig_getmethods__["targetShifts"] = _Primme.primme_params_targetShifts_get
    if _newclass:
        targetShifts = _swig_property(_Primme.primme_params_targetShifts_get, _Primme.primme_params_targetShifts_set)
    __swig_setmethods__["dynamicMethodSwitch"] = _Primme.primme_params_dynamicMethodSwitch_set
    __swig_getmethods__["dynamicMethodSwitch"] = _Primme.primme_params_dynamicMethodSwitch_get
    if _newclass:
        dynamicMethodSwitch = _swig_property(_Primme.primme_params_dynamicMethodSwitch_get, _Primme.primme_params_dynamicMethodSwitch_set)
    __swig_setmethods__["locking"] = _Primme.primme_params_locking_set
    __swig_getmethods__["locking"] = _Primme.primme_params_locking_get
    if _newclass:
        locking = _swig_property(_Primme.primme_params_locking_get, _Primme.primme_params_locking_set)
    __swig_setmethods__["initSize"] = _Primme.primme_params_initSize_set
    __swig_getmethods__["initSize"] = _Primme.primme_params_initSize_get
    if _newclass:
        initSize = _swig_property(_Primme.primme_params_initSize_get, _Primme.primme_params_initSize_set)
    __swig_setmethods__["numOrthoConst"] = _Primme.primme_params_numOrthoConst_set
    __swig_getmethods__["numOrthoConst"] = _Primme.primme_params_numOrthoConst_get
    if _newclass:
        numOrthoConst = _swig_property(_Primme.primme_params_numOrthoConst_get, _Primme.primme_params_numOrthoConst_set)
    __swig_setmethods__["maxBasisSize"] = _Primme.primme_params_maxBasisSize_set
    __swig_getmethods__["maxBasisSize"] = _Primme.primme_params_maxBasisSize_get
    if _newclass:
        maxBasisSize = _swig_property(_Primme.primme_params_maxBasisSize_get, _Primme.primme_params_maxBasisSize_set)
    __swig_setmethods__["minRestartSize"] = _Primme.primme_params_minRestartSize_set
    __swig_getmethods__["minRestartSize"] = _Primme.primme_params_minRestartSize_get
    if _newclass:
        minRestartSize = _swig_property(_Primme.primme_params_minRestartSize_get, _Primme.primme_params_minRestartSize_set)
    __swig_setmethods__["maxBlockSize"] = _Primme.primme_params_maxBlockSize_set
    __swig_getmethods__["maxBlockSize"] = _Primme.primme_params_maxBlockSize_get
    if _newclass:
        maxBlockSize = _swig_property(_Primme.primme_params_maxBlockSize_get, _Primme.primme_params_maxBlockSize_set)
    __swig_setmethods__["maxMatvecs"] = _Primme.primme_params_maxMatvecs_set
    __swig_getmethods__["maxMatvecs"] = _Primme.primme_params_maxMatvecs_get
    if _newclass:
        maxMatvecs = _swig_property(_Primme.primme_params_maxMatvecs_get, _Primme.primme_params_maxMatvecs_set)
    __swig_setmethods__["maxOuterIterations"] = _Primme.primme_params_maxOuterIterations_set
    __swig_getmethods__["maxOuterIterations"] = _Primme.primme_params_maxOuterIterations_get
    if _newclass:
        maxOuterIterations = _swig_property(_Primme.primme_params_maxOuterIterations_get, _Primme.primme_params_maxOuterIterations_set)
    __swig_setmethods__["intWorkSize"] = _Primme.primme_params_intWorkSize_set
    __swig_getmethods__["intWorkSize"] = _Primme.primme_params_intWorkSize_get
    if _newclass:
        intWorkSize = _swig_property(_Primme.primme_params_intWorkSize_get, _Primme.primme_params_intWorkSize_set)
    __swig_setmethods__["realWorkSize"] = _Primme.primme_params_realWorkSize_set
    __swig_getmethods__["realWorkSize"] = _Primme.primme_params_realWorkSize_get
    if _newclass:
        realWorkSize = _swig_property(_Primme.primme_params_realWorkSize_get, _Primme.primme_params_realWorkSize_set)
    __swig_setmethods__["iseed"] = _Primme.primme_params_iseed_set
    __swig_getmethods__["iseed"] = _Primme.primme_params_iseed_get
    if _newclass:
        iseed = _swig_property(_Primme.primme_params_iseed_get, _Primme.primme_params_iseed_set)
    __swig_setmethods__["intWork"] = _Primme.primme_params_intWork_set
    __swig_getmethods__["intWork"] = _Primme.primme_params_intWork_get
    if _newclass:
        intWork = _swig_property(_Primme.primme_params_intWork_get, _Primme.primme_params_intWork_set)
    __swig_setmethods__["realWork"] = _Primme.primme_params_realWork_set
    __swig_getmethods__["realWork"] = _Primme.primme_params_realWork_get
    if _newclass:
        realWork = _swig_property(_Primme.primme_params_realWork_get, _Primme.primme_params_realWork_set)
    __swig_setmethods__["aNorm"] = _Primme.primme_params_aNorm_set
    __swig_getmethods__["aNorm"] = _Primme.primme_params_aNorm_get
    if _newclass:
        aNorm = _swig_property(_Primme.primme_params_aNorm_get, _Primme.primme_params_aNorm_set)
    __swig_setmethods__["eps"] = _Primme.primme_params_eps_set
    __swig_getmethods__["eps"] = _Primme.primme_params_eps_get
    if _newclass:
        eps = _swig_property(_Primme.primme_params_eps_get, _Primme.primme_params_eps_set)
    __swig_setmethods__["printLevel"] = _Primme.primme_params_printLevel_set
    __swig_getmethods__["printLevel"] = _Primme.primme_params_printLevel_get
    if _newclass:
        printLevel = _swig_property(_Primme.primme_params_printLevel_get, _Primme.primme_params_printLevel_set)
    __swig_setmethods__["outputFile"] = _Primme.primme_params_outputFile_set
    __swig_getmethods__["outputFile"] = _Primme.primme_params_outputFile_get
    if _newclass:
        outputFile = _swig_property(_Primme.primme_params_outputFile_get, _Primme.primme_params_outputFile_set)
    __swig_setmethods__["matrix"] = _Primme.primme_params_matrix_set
    __swig_getmethods__["matrix"] = _Primme.primme_params_matrix_get
    if _newclass:
        matrix = _swig_property(_Primme.primme_params_matrix_get, _Primme.primme_params_matrix_set)
    __swig_setmethods__["preconditioner"] = _Primme.primme_params_preconditioner_set
    __swig_getmethods__["preconditioner"] = _Primme.primme_params_preconditioner_get
    if _newclass:
        preconditioner = _swig_property(_Primme.primme_params_preconditioner_get, _Primme.primme_params_preconditioner_set)
    __swig_setmethods__["ShiftsForPreconditioner"] = _Primme.primme_params_ShiftsForPreconditioner_set
    __swig_getmethods__["ShiftsForPreconditioner"] = _Primme.primme_params_ShiftsForPreconditioner_get
    if _newclass:
        ShiftsForPreconditioner = _swig_property(_Primme.primme_params_ShiftsForPreconditioner_get, _Primme.primme_params_ShiftsForPreconditioner_set)
    __swig_setmethods__["restartingParams"] = _Primme.primme_params_restartingParams_set
    __swig_getmethods__["restartingParams"] = _Primme.primme_params_restartingParams_get
    if _newclass:
        restartingParams = _swig_property(_Primme.primme_params_restartingParams_get, _Primme.primme_params_restartingParams_set)
    __swig_setmethods__["correctionParams"] = _Primme.primme_params_correctionParams_set
    __swig_getmethods__["correctionParams"] = _Primme.primme_params_correctionParams_get
    if _newclass:
        correctionParams = _swig_property(_Primme.primme_params_correctionParams_get, _Primme.primme_params_correctionParams_set)
    __swig_setmethods__["stats"] = _Primme.primme_params_stats_set
    __swig_getmethods__["stats"] = _Primme.primme_params_stats_get
    if _newclass:
        stats = _swig_property(_Primme.primme_params_stats_get, _Primme.primme_params_stats_set)
    __swig_setmethods__["stackTrace"] = _Primme.primme_params_stackTrace_set
    __swig_getmethods__["stackTrace"] = _Primme.primme_params_stackTrace_get
    if _newclass:
        stackTrace = _swig_property(_Primme.primme_params_stackTrace_get, _Primme.primme_params_stackTrace_set)

    def __init__(self):
        this = _Primme.new_primme_params()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Primme.delete_primme_params
    __del__ = lambda self: None
primme_params_swigregister = _Primme.primme_params_swigregister
primme_params_swigregister(primme_params)


_Primme.DYNAMIC_swigconstant(_Primme)
DYNAMIC = _Primme.DYNAMIC

_Primme.DEFAULT_MIN_TIME_swigconstant(_Primme)
DEFAULT_MIN_TIME = _Primme.DEFAULT_MIN_TIME

_Primme.DEFAULT_MIN_MATVECS_swigconstant(_Primme)
DEFAULT_MIN_MATVECS = _Primme.DEFAULT_MIN_MATVECS

_Primme.Arnoldi_swigconstant(_Primme)
Arnoldi = _Primme.Arnoldi

_Primme.GD_swigconstant(_Primme)
GD = _Primme.GD

_Primme.GD_plusK_swigconstant(_Primme)
GD_plusK = _Primme.GD_plusK

_Primme.GD_Olsen_plusK_swigconstant(_Primme)
GD_Olsen_plusK = _Primme.GD_Olsen_plusK

_Primme.JD_Olsen_plusK_swigconstant(_Primme)
JD_Olsen_plusK = _Primme.JD_Olsen_plusK

_Primme.RQI_swigconstant(_Primme)
RQI = _Primme.RQI

_Primme.JDQR_swigconstant(_Primme)
JDQR = _Primme.JDQR

_Primme.JDQMR_swigconstant(_Primme)
JDQMR = _Primme.JDQMR

_Primme.JDQMR_ETol_swigconstant(_Primme)
JDQMR_ETol = _Primme.JDQMR_ETol

_Primme.SUBSPACE_ITERATION_swigconstant(_Primme)
SUBSPACE_ITERATION = _Primme.SUBSPACE_ITERATION

_Primme.LOBPCG_OrthoBasis_swigconstant(_Primme)
LOBPCG_OrthoBasis = _Primme.LOBPCG_OrthoBasis

_Primme.LOBPCG_OrthoBasis_Window_swigconstant(_Primme)
LOBPCG_OrthoBasis_Window = _Primme.LOBPCG_OrthoBasis_Window

def dprimme(*args):
    return _Primme.dprimme(*args)
dprimme = _Primme.dprimme

def zprimme(*args):
    return _Primme.zprimme(*args)
zprimme = _Primme.zprimme
class primme_params_w(primme_params):
    __swig_setmethods__ = {}
    for _s in [primme_params]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, primme_params_w, name, value)
    __swig_getmethods__ = {}
    for _s in [primme_params]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, primme_params_w, name)
    __repr__ = _swig_repr
    __swig_setmethods__["__kind"] = _Primme.primme_params_w___kind_set
    __swig_getmethods__["__kind"] = _Primme.primme_params_w___kind_get
    if _newclass:
        __kind = _swig_property(_Primme.primme_params_w___kind_get, _Primme.primme_params_w___kind_set)

    def __init__(self):
        if self.__class__ == primme_params_w:
            _self = None
        else:
            _self = self
        this = _Primme.new_primme_params_w(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Primme.delete_primme_params_w
    __del__ = lambda self: None

    def display(self):
        return _Primme.primme_params_w_display(self)

    def set_method(self, method):
        return _Primme.primme_params_w_set_method(self, method)

    def matvec(self):
        return _Primme.primme_params_w_matvec(self)

    def prevec(self):
        return _Primme.primme_params_w_prevec(self)

    def getXd(self):
        return _Primme.primme_params_w_getXd(self)

    def getXz(self):
        return _Primme.primme_params_w_getXz(self)

    def setYd(self, len1Y):
        return _Primme.primme_params_w_setYd(self, len1Y)

    def setYz(self, len1Y):
        return _Primme.primme_params_w_setYz(self, len1Y)

    def getX(self):
       if self.__kind == 1:
          return self.getXd()
       elif self.__kind == 3:
          return self.getXz()



    def setY(self, Y):
       if self.__kind == 1:
          self.setYd(Y)
       elif self.__kind == 3:
          self.setYz(Y)


    def __disown__(self):
        self.this.disown()
        _Primme.disown_primme_params_w(self)
        return weakref_proxy(self)
primme_params_w_swigregister = _Primme.primme_params_w_swigregister
primme_params_w_swigregister(primme_params_w)

# This file is compatible with both classic and new-style classes.


