/*******************************************************************************
 *   PRIMME PReconditioned Iterative MultiMethod Eigensolver
 *   Copyright (C) 2015 College of William & Mary,
 *   James R. McCombs, Eloy Romero Alcalde, Andreas Stathopoulos, Lingfei Wu
 *
 *   This file is part of PRIMME.
 *
 *   PRIMME is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   PRIMME is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef update_W_H
#define update_W_H
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Sprimme)
#  define matrixMatvec_Sprimme CONCAT(matrixMatvec_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Rprimme)
#  define matrixMatvec_Rprimme CONCAT(matrixMatvec_,REAL_SUF)
#endif
int matrixMatvec_dprimme(double *V, int64_t nLocal, int64_t ldV,
      double *W, int64_t ldW, int basisSize, int blockSize,
      primme_params *primme);
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Sprimme)
#  define update_Q_Sprimme CONCAT(update_Q_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Rprimme)
#  define update_Q_Rprimme CONCAT(update_Q_,REAL_SUF)
#endif
int update_Q_dprimme(double *V, int64_t nLocal, int64_t ldV,
      double *W, int64_t ldW, double *Q, int64_t ldQ, double *R, int ldR,
      double targetShift, int basisSize, int blockSize, double *rwork,
      size_t *rworkSize, double machEps, primme_params *primme);
int matrixMatvec_zprimme(_Complex double *V, int64_t nLocal, int64_t ldV,
      _Complex double *W, int64_t ldW, int basisSize, int blockSize,
      primme_params *primme);
int update_Q_zprimme(_Complex double *V, int64_t nLocal, int64_t ldV,
      _Complex double *W, int64_t ldW, _Complex double *Q, int64_t ldQ, _Complex double *R, int ldR,
      double targetShift, int basisSize, int blockSize, _Complex double *rwork,
      size_t *rworkSize, double machEps, primme_params *primme);
int matrixMatvec_sprimme(float *V, int64_t nLocal, int64_t ldV,
      float *W, int64_t ldW, int basisSize, int blockSize,
      primme_params *primme);
int update_Q_sprimme(float *V, int64_t nLocal, int64_t ldV,
      float *W, int64_t ldW, float *Q, int64_t ldQ, float *R, int ldR,
      double targetShift, int basisSize, int blockSize, float *rwork,
      size_t *rworkSize, double machEps, primme_params *primme);
int matrixMatvec_cprimme(_Complex float *V, int64_t nLocal, int64_t ldV,
      _Complex float *W, int64_t ldW, int basisSize, int blockSize,
      primme_params *primme);
int update_Q_cprimme(_Complex float *V, int64_t nLocal, int64_t ldV,
      _Complex float *W, int64_t ldW, _Complex float *Q, int64_t ldQ, _Complex float *R, int ldR,
      double targetShift, int basisSize, int blockSize, _Complex float *rwork,
      size_t *rworkSize, double machEps, primme_params *primme);
#endif
