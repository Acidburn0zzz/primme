/*******************************************************************************
 *   PRIMME PReconditioned Iterative MultiMethod Eigensolver
 *   Copyright (C) 2015 College of William & Mary,
 *   James R. McCombs, Eloy Romero Alcalde, Andreas Stathopoulos, Lingfei Wu
 *
 *   This file is part of PRIMME.
 *
 *   PRIMME is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   PRIMME is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef locking_H
#define locking_H
#if !defined(CHECK_TEMPLATE) && !defined(restart_locking_Sprimme)
#  define restart_locking_Sprimme CONCAT(restart_locking_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(restart_locking_Rprimme)
#  define restart_locking_Rprimme CONCAT(restart_locking_,REAL_SUF)
#endif
int restart_locking_dprimme(int *restartSize, double *V, double *W,
      int64_t nLocal, int basisSize, int64_t ldV, double **X, double **R,
      double *hVecs, int ldhVecs, int *restartPerm, double *hVals, int *flags,
      int *iev, int *ievSize, double *blockNorms, double *evecs, double *evals,
      int *numConverged, int *numLocked, double *resNorms, int *evecsperm,
      int numPrevRetained, int *indexOfPreviousVecs, int *hVecsPerm,
      int reset, double machEps, double *rwork, size_t *rworkSize, int *iwork,
      int iworkSize, primme_params *primme);
int restart_locking_zprimme(int *restartSize, _Complex double *V, _Complex double *W,
      int64_t nLocal, int basisSize, int64_t ldV, _Complex double **X, _Complex double **R,
      _Complex double *hVecs, int ldhVecs, int *restartPerm, double *hVals, int *flags,
      int *iev, int *ievSize, double *blockNorms, _Complex double *evecs, double *evals,
      int *numConverged, int *numLocked, double *resNorms, int *evecsperm,
      int numPrevRetained, int *indexOfPreviousVecs, int *hVecsPerm,
      int reset, double machEps, _Complex double *rwork, size_t *rworkSize, int *iwork,
      int iworkSize, primme_params *primme);
int restart_locking_sprimme(int *restartSize, float *V, float *W,
      int64_t nLocal, int basisSize, int64_t ldV, float **X, float **R,
      float *hVecs, int ldhVecs, int *restartPerm, float *hVals, int *flags,
      int *iev, int *ievSize, float *blockNorms, float *evecs, float *evals,
      int *numConverged, int *numLocked, float *resNorms, int *evecsperm,
      int numPrevRetained, int *indexOfPreviousVecs, int *hVecsPerm,
      int reset, double machEps, float *rwork, size_t *rworkSize, int *iwork,
      int iworkSize, primme_params *primme);
int restart_locking_cprimme(int *restartSize, _Complex float *V, _Complex float *W,
      int64_t nLocal, int basisSize, int64_t ldV, _Complex float **X, _Complex float **R,
      _Complex float *hVecs, int ldhVecs, int *restartPerm, float *hVals, int *flags,
      int *iev, int *ievSize, float *blockNorms, _Complex float *evecs, float *evals,
      int *numConverged, int *numLocked, float *resNorms, int *evecsperm,
      int numPrevRetained, int *indexOfPreviousVecs, int *hVecsPerm,
      int reset, double machEps, _Complex float *rwork, size_t *rworkSize, int *iwork,
      int iworkSize, primme_params *primme);
#endif
