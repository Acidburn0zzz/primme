/*******************************************************************************
 *   PRIMME PReconditioned Iterative MultiMethod Eigensolver
 *   Copyright (C) 2015 College of William & Mary,
 *   James R. McCombs, Eloy Romero Alcalde, Andreas Stathopoulos, Lingfei Wu
 *
 *   This file is part of PRIMME.
 *
 *   PRIMME is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   PRIMME is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef update_projection_H
#define update_projection_H
#if !defined(CHECK_TEMPLATE) && !defined(update_projection_Sprimme)
#  define update_projection_Sprimme CONCAT(update_projection_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_projection_Rprimme)
#  define update_projection_Rprimme CONCAT(update_projection_,REAL_SUF)
#endif
int update_projection_dprimme(double *X, int64_t ldX, double *Y,
      int64_t ldY, double *Z, int64_t ldZ, int64_t nLocal, int numCols,
      int blockSize, double *rwork, size_t *lrwork, int isSymmetric,
      primme_params *primme);
int update_projection_zprimme(_Complex double *X, int64_t ldX, _Complex double *Y,
      int64_t ldY, _Complex double *Z, int64_t ldZ, int64_t nLocal, int numCols,
      int blockSize, _Complex double *rwork, size_t *lrwork, int isSymmetric,
      primme_params *primme);
int update_projection_sprimme(float *X, int64_t ldX, float *Y,
      int64_t ldY, float *Z, int64_t ldZ, int64_t nLocal, int numCols,
      int blockSize, float *rwork, size_t *lrwork, int isSymmetric,
      primme_params *primme);
int update_projection_cprimme(_Complex float *X, int64_t ldX, _Complex float *Y,
      int64_t ldY, _Complex float *Z, int64_t ldZ, int64_t nLocal, int numCols,
      int blockSize, _Complex float *rwork, size_t *lrwork, int isSymmetric,
      primme_params *primme);
#endif
