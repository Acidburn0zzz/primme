/*******************************************************************************
 *   PRIMME PReconditioned Iterative MultiMethod Eigensolver
 *   Copyright (C) 2015 College of William & Mary,
 *   James R. McCombs, Eloy Romero Alcalde, Andreas Stathopoulos, Lingfei Wu
 *
 *   This file is part of PRIMME.
 *
 *   PRIMME is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   PRIMME is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef inner_solve_H
#define inner_solve_H
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_Sprimme)
#  define inner_solve_Sprimme CONCAT(inner_solve_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_Rprimme)
#  define inner_solve_Rprimme CONCAT(inner_solve_,REAL_SUF)
#endif
int inner_solve_dprimme(double *x, double *r, double *rnorm, double *evecs,
      int64_t ldevecs, double *UDU, int *ipivot, double *xKinvx,
      double *Lprojector, int64_t ldLprojector,
      double *RprojectorQ, int64_t ldRprojectorQ, double *RprojectorX,
      int64_t ldRprojectorX, int sizeLprojector, int sizeRprojectorQ,
      int sizeRprojectorX, double *sol, double eval, double shift,
      double eresTol, double aNormEstimate, double machEps, double *rwork,
      size_t rworkSize, primme_params *primme);
int inner_solve_zprimme(PRIMME_COMPLEX_DOUBLE *x, PRIMME_COMPLEX_DOUBLE *r, double *rnorm, PRIMME_COMPLEX_DOUBLE *evecs,
      int64_t ldevecs, PRIMME_COMPLEX_DOUBLE *UDU, int *ipivot, PRIMME_COMPLEX_DOUBLE *xKinvx,
      PRIMME_COMPLEX_DOUBLE *Lprojector, int64_t ldLprojector,
      PRIMME_COMPLEX_DOUBLE *RprojectorQ, int64_t ldRprojectorQ, PRIMME_COMPLEX_DOUBLE *RprojectorX,
      int64_t ldRprojectorX, int sizeLprojector, int sizeRprojectorQ,
      int sizeRprojectorX, PRIMME_COMPLEX_DOUBLE *sol, double eval, double shift,
      double eresTol, double aNormEstimate, double machEps, PRIMME_COMPLEX_DOUBLE *rwork,
      size_t rworkSize, primme_params *primme);
int inner_solve_sprimme(float *x, float *r, float *rnorm, float *evecs,
      int64_t ldevecs, float *UDU, int *ipivot, float *xKinvx,
      float *Lprojector, int64_t ldLprojector,
      float *RprojectorQ, int64_t ldRprojectorQ, float *RprojectorX,
      int64_t ldRprojectorX, int sizeLprojector, int sizeRprojectorQ,
      int sizeRprojectorX, float *sol, float eval, float shift,
      double eresTol, double aNormEstimate, double machEps, float *rwork,
      size_t rworkSize, primme_params *primme);
int inner_solve_cprimme(PRIMME_COMPLEX_FLOAT *x, PRIMME_COMPLEX_FLOAT *r, float *rnorm, PRIMME_COMPLEX_FLOAT *evecs,
      int64_t ldevecs, PRIMME_COMPLEX_FLOAT *UDU, int *ipivot, PRIMME_COMPLEX_FLOAT *xKinvx,
      PRIMME_COMPLEX_FLOAT *Lprojector, int64_t ldLprojector,
      PRIMME_COMPLEX_FLOAT *RprojectorQ, int64_t ldRprojectorQ, PRIMME_COMPLEX_FLOAT *RprojectorX,
      int64_t ldRprojectorX, int sizeLprojector, int sizeRprojectorQ,
      int sizeRprojectorX, PRIMME_COMPLEX_FLOAT *sol, float eval, float shift,
      double eresTol, double aNormEstimate, double machEps, PRIMME_COMPLEX_FLOAT *rwork,
      size_t rworkSize, primme_params *primme);
#endif
