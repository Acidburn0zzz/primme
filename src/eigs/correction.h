/*******************************************************************************
 *   PRIMME PReconditioned Iterative MultiMethod Eigensolver
 *   Copyright (C) 2015 College of William & Mary,
 *   James R. McCombs, Eloy Romero Alcalde, Andreas Stathopoulos, Lingfei Wu
 *
 *   This file is part of PRIMME.
 *
 *   PRIMME is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   PRIMME is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef correction_H
#define correction_H
#if !defined(CHECK_TEMPLATE) && !defined(solve_correction_Sprimme)
#  define solve_correction_Sprimme CONCAT(solve_correction_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(solve_correction_Rprimme)
#  define solve_correction_Rprimme CONCAT(solve_correction_,REAL_SUF)
#endif
int solve_correction_dprimme(double *V, int64_t ldV, double *W,
      int64_t ldW, double *evecs, int64_t ldevecs, double *evecsHat,
      int64_t ldevecsHat, double *UDU, int *ipivot, double *lockedEvals,
      int numLocked, int numConvergedStored, double *ritzVals,
      double *prevRitzVals, int *numPrevRitzVals, int *flags, int basisSize,
      double *blockNorms, int *iev, int blockSize, double eresTol,
      double machEps, double aNormEstimate, double *rwork, size_t *rworkSize,
      int *iwork, int iworkSize, primme_params *primme);
int solve_correction_zprimme(PRIMME_COMPLEX_DOUBLE *V, int64_t ldV, PRIMME_COMPLEX_DOUBLE *W,
      int64_t ldW, PRIMME_COMPLEX_DOUBLE *evecs, int64_t ldevecs, PRIMME_COMPLEX_DOUBLE *evecsHat,
      int64_t ldevecsHat, PRIMME_COMPLEX_DOUBLE *UDU, int *ipivot, double *lockedEvals,
      int numLocked, int numConvergedStored, double *ritzVals,
      double *prevRitzVals, int *numPrevRitzVals, int *flags, int basisSize,
      double *blockNorms, int *iev, int blockSize, double eresTol,
      double machEps, double aNormEstimate, PRIMME_COMPLEX_DOUBLE *rwork, size_t *rworkSize,
      int *iwork, int iworkSize, primme_params *primme);
int solve_correction_sprimme(float *V, int64_t ldV, float *W,
      int64_t ldW, float *evecs, int64_t ldevecs, float *evecsHat,
      int64_t ldevecsHat, float *UDU, int *ipivot, float *lockedEvals,
      int numLocked, int numConvergedStored, float *ritzVals,
      float *prevRitzVals, int *numPrevRitzVals, int *flags, int basisSize,
      float *blockNorms, int *iev, int blockSize, double eresTol,
      double machEps, double aNormEstimate, float *rwork, size_t *rworkSize,
      int *iwork, int iworkSize, primme_params *primme);
int solve_correction_cprimme(PRIMME_COMPLEX_FLOAT *V, int64_t ldV, PRIMME_COMPLEX_FLOAT *W,
      int64_t ldW, PRIMME_COMPLEX_FLOAT *evecs, int64_t ldevecs, PRIMME_COMPLEX_FLOAT *evecsHat,
      int64_t ldevecsHat, PRIMME_COMPLEX_FLOAT *UDU, int *ipivot, float *lockedEvals,
      int numLocked, int numConvergedStored, float *ritzVals,
      float *prevRitzVals, int *numPrevRitzVals, int *flags, int basisSize,
      float *blockNorms, int *iev, int blockSize, double eresTol,
      double machEps, double aNormEstimate, PRIMME_COMPLEX_FLOAT *rwork, size_t *rworkSize,
      int *iwork, int iworkSize, primme_params *primme);
#endif
