/*******************************************************************************
 *   PRIMME PReconditioned Iterative MultiMethod Eigensolver
 *   Copyright (C) 2015 College of William & Mary,
 *   James R. McCombs, Eloy Romero Alcalde, Andreas Stathopoulos, Lingfei Wu
 *
 *   This file is part of PRIMME.
 *
 *   PRIMME is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   PRIMME is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef correction_H
#define correction_H
#if !defined(CHECK_TEMPLATE) && !defined(solve_correction_Sprimme)
#  define solve_correction_Sprimme CONCAT(solve_correction_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(solve_correction_Rprimme)
#  define solve_correction_Rprimme CONCAT(solve_correction_,REAL_SUF)
#endif
int solve_correction_dprimme(double *V, double *W, double *evecs,
   double *evecsHat, double *UDU, int *ipivot, double *lockedEvals,
   int numLocked, int numConvergedStored, double *ritzVals,
   double *prevRitzVals, int *numPrevRitzVals, int *flags, int basisSize,
   double *blockNorms, int *iev, int blockSize, double eresTol,
   double machEps, double aNormEstimate, double *rwork, size_t *rworkSize,
   int *iwork, int iworkSize, primme_params *primme);
int solve_correction_zprimme(_Complex double *V, _Complex double *W, _Complex double *evecs,
   _Complex double *evecsHat, _Complex double *UDU, int *ipivot, double *lockedEvals,
   int numLocked, int numConvergedStored, double *ritzVals,
   double *prevRitzVals, int *numPrevRitzVals, int *flags, int basisSize,
   double *blockNorms, int *iev, int blockSize, double eresTol,
   double machEps, double aNormEstimate, _Complex double *rwork, size_t *rworkSize,
   int *iwork, int iworkSize, primme_params *primme);
int solve_correction_sprimme(float *V, float *W, float *evecs,
   float *evecsHat, float *UDU, int *ipivot, float *lockedEvals,
   int numLocked, int numConvergedStored, float *ritzVals,
   float *prevRitzVals, int *numPrevRitzVals, int *flags, int basisSize,
   float *blockNorms, int *iev, int blockSize, double eresTol,
   double machEps, double aNormEstimate, float *rwork, size_t *rworkSize,
   int *iwork, int iworkSize, primme_params *primme);
int solve_correction_cprimme(_Complex float *V, _Complex float *W, _Complex float *evecs,
   _Complex float *evecsHat, _Complex float *UDU, int *ipivot, float *lockedEvals,
   int numLocked, int numConvergedStored, float *ritzVals,
   float *prevRitzVals, int *numPrevRitzVals, int *flags, int basisSize,
   float *blockNorms, int *iev, int blockSize, double eresTol,
   double machEps, double aNormEstimate, _Complex float *rwork, size_t *rworkSize,
   int *iwork, int iworkSize, primme_params *primme);
#endif
