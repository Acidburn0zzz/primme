/*******************************************************************************
 *   PRIMME PReconditioned Iterative MultiMethod Eigensolver
 *   Copyright (C) 2015 College of William & Mary,
 *   James R. McCombs, Eloy Romero Alcalde, Andreas Stathopoulos, Lingfei Wu
 *
 *   This file is part of PRIMME.
 *
 *   PRIMME is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   PRIMME is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef auxiliary_eigs_H
#define auxiliary_eigs_H
#if !defined(CHECK_TEMPLATE) && !defined(Num_compute_residual_Sprimme)
#  define Num_compute_residual_Sprimme CONCAT(Num_compute_residual_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_compute_residual_Rprimme)
#  define Num_compute_residual_Rprimme CONCAT(Num_compute_residual_,REAL_SUF)
#endif
void Num_compute_residual_dprimme(int64_t n, double eval, double *x,
   double *Ax, double *r);
#if !defined(CHECK_TEMPLATE) && !defined(Num_update_VWXR_Sprimme)
#  define Num_update_VWXR_Sprimme CONCAT(Num_update_VWXR_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_update_VWXR_Rprimme)
#  define Num_update_VWXR_Rprimme CONCAT(Num_update_VWXR_,REAL_SUF)
#endif
int Num_update_VWXR_dprimme(double *V, double *W, int64_t mV, int nV,
      int64_t ldV, double *h, int nh, int ldh, double *hVals,
      double *X0, int nX0b, int nX0e, int64_t ldX0,
      double *X1, int nX1b, int nX1e, int64_t ldX1,
      double *X2, int nX2b, int nX2e, int64_t ldX2,
      double *Wo, int nWob, int nWoe, int64_t ldWo,
      double *R, int nRb, int nRe, int64_t ldR, double *Rnorms,
      double *rnorms, int nrb, int nre,
      double *rwork, int lrwork, primme_params *primme);
void Num_compute_residual_zprimme(int64_t n, PRIMME_COMPLEX_DOUBLE eval, PRIMME_COMPLEX_DOUBLE *x,
   PRIMME_COMPLEX_DOUBLE *Ax, PRIMME_COMPLEX_DOUBLE *r);
int Num_update_VWXR_zprimme(PRIMME_COMPLEX_DOUBLE *V, PRIMME_COMPLEX_DOUBLE *W, int64_t mV, int nV,
      int64_t ldV, PRIMME_COMPLEX_DOUBLE *h, int nh, int ldh, double *hVals,
      PRIMME_COMPLEX_DOUBLE *X0, int nX0b, int nX0e, int64_t ldX0,
      PRIMME_COMPLEX_DOUBLE *X1, int nX1b, int nX1e, int64_t ldX1,
      PRIMME_COMPLEX_DOUBLE *X2, int nX2b, int nX2e, int64_t ldX2,
      PRIMME_COMPLEX_DOUBLE *Wo, int nWob, int nWoe, int64_t ldWo,
      PRIMME_COMPLEX_DOUBLE *R, int nRb, int nRe, int64_t ldR, double *Rnorms,
      double *rnorms, int nrb, int nre,
      PRIMME_COMPLEX_DOUBLE *rwork, int lrwork, primme_params *primme);
void Num_compute_residual_sprimme(int64_t n, float eval, float *x,
   float *Ax, float *r);
int Num_update_VWXR_sprimme(float *V, float *W, int64_t mV, int nV,
      int64_t ldV, float *h, int nh, int ldh, float *hVals,
      float *X0, int nX0b, int nX0e, int64_t ldX0,
      float *X1, int nX1b, int nX1e, int64_t ldX1,
      float *X2, int nX2b, int nX2e, int64_t ldX2,
      float *Wo, int nWob, int nWoe, int64_t ldWo,
      float *R, int nRb, int nRe, int64_t ldR, float *Rnorms,
      float *rnorms, int nrb, int nre,
      float *rwork, int lrwork, primme_params *primme);
void Num_compute_residual_cprimme(int64_t n, PRIMME_COMPLEX_FLOAT eval, PRIMME_COMPLEX_FLOAT *x,
   PRIMME_COMPLEX_FLOAT *Ax, PRIMME_COMPLEX_FLOAT *r);
int Num_update_VWXR_cprimme(PRIMME_COMPLEX_FLOAT *V, PRIMME_COMPLEX_FLOAT *W, int64_t mV, int nV,
      int64_t ldV, PRIMME_COMPLEX_FLOAT *h, int nh, int ldh, float *hVals,
      PRIMME_COMPLEX_FLOAT *X0, int nX0b, int nX0e, int64_t ldX0,
      PRIMME_COMPLEX_FLOAT *X1, int nX1b, int nX1e, int64_t ldX1,
      PRIMME_COMPLEX_FLOAT *X2, int nX2b, int nX2e, int64_t ldX2,
      PRIMME_COMPLEX_FLOAT *Wo, int nWob, int nWoe, int64_t ldWo,
      PRIMME_COMPLEX_FLOAT *R, int nRb, int nRe, int64_t ldR, float *Rnorms,
      float *rnorms, int nrb, int nre,
      PRIMME_COMPLEX_FLOAT *rwork, int lrwork, primme_params *primme);
#endif
