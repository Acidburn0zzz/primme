/*******************************************************************************
 *   PRIMME PReconditioned Iterative MultiMethod Eigensolver
 *   Copyright (C) 2015 College of William & Mary,
 *   James R. McCombs, Eloy Romero Alcalde, Andreas Stathopoulos, Lingfei Wu
 *
 *   This file is part of PRIMME.
 *
 *   PRIMME is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   PRIMME is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef factorize_H
#define factorize_H
#if !defined(CHECK_TEMPLATE) && !defined(UDUDecompose_Sprimme)
#  define UDUDecompose_Sprimme CONCAT(UDUDecompose_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUDecompose_Rprimme)
#  define UDUDecompose_Rprimme CONCAT(UDUDecompose_,REAL_SUF)
#endif
int UDUDecompose_dprimme(double *M, int ldM, double *UDU, int ldUDU,
      int *ipivot, int dimM, double *rwork, size_t *rworkSize,
      primme_params *primme);
#if !defined(CHECK_TEMPLATE) && !defined(UDUSolve_Sprimme)
#  define UDUSolve_Sprimme CONCAT(UDUSolve_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUSolve_Rprimme)
#  define UDUSolve_Rprimme CONCAT(UDUSolve_,REAL_SUF)
#endif
int UDUSolve_dprimme(double *UDU, int *ipivot, int dim, double *rhs,
   double *sol, primme_params *primme);
int UDUDecompose_zprimme(PRIMME_COMPLEX_DOUBLE *M, int ldM, PRIMME_COMPLEX_DOUBLE *UDU, int ldUDU,
      int *ipivot, int dimM, PRIMME_COMPLEX_DOUBLE *rwork, size_t *rworkSize,
      primme_params *primme);
int UDUSolve_zprimme(PRIMME_COMPLEX_DOUBLE *UDU, int *ipivot, int dim, PRIMME_COMPLEX_DOUBLE *rhs,
   PRIMME_COMPLEX_DOUBLE *sol, primme_params *primme);
int UDUDecompose_sprimme(float *M, int ldM, float *UDU, int ldUDU,
      int *ipivot, int dimM, float *rwork, size_t *rworkSize,
      primme_params *primme);
int UDUSolve_sprimme(float *UDU, int *ipivot, int dim, float *rhs,
   float *sol, primme_params *primme);
int UDUDecompose_cprimme(PRIMME_COMPLEX_FLOAT *M, int ldM, PRIMME_COMPLEX_FLOAT *UDU, int ldUDU,
      int *ipivot, int dimM, PRIMME_COMPLEX_FLOAT *rwork, size_t *rworkSize,
      primme_params *primme);
int UDUSolve_cprimme(PRIMME_COMPLEX_FLOAT *UDU, int *ipivot, int dim, PRIMME_COMPLEX_FLOAT *rhs,
   PRIMME_COMPLEX_FLOAT *sol, primme_params *primme);
#endif
