/*******************************************************************************
 *   PRIMME PReconditioned Iterative MultiMethod Eigensolver
 *   Copyright (C) 2015 College of William & Mary,
 *   James R. McCombs, Eloy Romero Alcalde, Andreas Stathopoulos, Lingfei Wu
 *
 *   This file is part of PRIMME.
 *
 *   PRIMME is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   PRIMME is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef solve_projection_H
#define solve_projection_H
#if !defined(CHECK_TEMPLATE) && !defined(solve_H_Sprimme)
#  define solve_H_Sprimme CONCAT(solve_H_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(solve_H_Rprimme)
#  define solve_H_Rprimme CONCAT(solve_H_,REAL_SUF)
#endif
int solve_H_dprimme(double *H, int basisSize, int ldH, double *R, int ldR,
   double *QtV, int ldQtV, double *hU, int ldhU, double *hVecs, int ldhVecs,
   double *hVals, double *hSVals, int numConverged, double machEps, size_t *lrwork,
   double *rwork, int liwork, int *iwork, primme_params *primme);
#if !defined(CHECK_TEMPLATE) && !defined(prepare_vecs_Sprimme)
#  define prepare_vecs_Sprimme CONCAT(prepare_vecs_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(prepare_vecs_Rprimme)
#  define prepare_vecs_Rprimme CONCAT(prepare_vecs_,REAL_SUF)
#endif
int prepare_vecs_dprimme(int basisSize, int i0, int blockSize,
      double *H, int ldH, double *hVals, double *hSVals, double *hVecs,
      int ldhVecs, int targetShiftIndex, int *arbitraryVecs,
      double smallestResNorm, int *flags, int RRForAll, double *hVecsRot,
      int ldhVecsRot, double machEps, size_t *rworkSize, double *rwork,
      int iworkSize, int *iwork, primme_params *primme);
int solve_H_zprimme(PRIMME_COMPLEX_DOUBLE *H, int basisSize, int ldH, PRIMME_COMPLEX_DOUBLE *R, int ldR,
   PRIMME_COMPLEX_DOUBLE *QtV, int ldQtV, PRIMME_COMPLEX_DOUBLE *hU, int ldhU, PRIMME_COMPLEX_DOUBLE *hVecs, int ldhVecs,
   double *hVals, double *hSVals, int numConverged, double machEps, size_t *lrwork,
   PRIMME_COMPLEX_DOUBLE *rwork, int liwork, int *iwork, primme_params *primme);
int prepare_vecs_zprimme(int basisSize, int i0, int blockSize,
      PRIMME_COMPLEX_DOUBLE *H, int ldH, double *hVals, double *hSVals, PRIMME_COMPLEX_DOUBLE *hVecs,
      int ldhVecs, int targetShiftIndex, int *arbitraryVecs,
      double smallestResNorm, int *flags, int RRForAll, PRIMME_COMPLEX_DOUBLE *hVecsRot,
      int ldhVecsRot, double machEps, size_t *rworkSize, PRIMME_COMPLEX_DOUBLE *rwork,
      int iworkSize, int *iwork, primme_params *primme);
int solve_H_sprimme(float *H, int basisSize, int ldH, float *R, int ldR,
   float *QtV, int ldQtV, float *hU, int ldhU, float *hVecs, int ldhVecs,
   float *hVals, float *hSVals, int numConverged, double machEps, size_t *lrwork,
   float *rwork, int liwork, int *iwork, primme_params *primme);
int prepare_vecs_sprimme(int basisSize, int i0, int blockSize,
      float *H, int ldH, float *hVals, float *hSVals, float *hVecs,
      int ldhVecs, int targetShiftIndex, int *arbitraryVecs,
      double smallestResNorm, int *flags, int RRForAll, float *hVecsRot,
      int ldhVecsRot, double machEps, size_t *rworkSize, float *rwork,
      int iworkSize, int *iwork, primme_params *primme);
int solve_H_cprimme(PRIMME_COMPLEX_FLOAT *H, int basisSize, int ldH, PRIMME_COMPLEX_FLOAT *R, int ldR,
   PRIMME_COMPLEX_FLOAT *QtV, int ldQtV, PRIMME_COMPLEX_FLOAT *hU, int ldhU, PRIMME_COMPLEX_FLOAT *hVecs, int ldhVecs,
   float *hVals, float *hSVals, int numConverged, double machEps, size_t *lrwork,
   PRIMME_COMPLEX_FLOAT *rwork, int liwork, int *iwork, primme_params *primme);
int prepare_vecs_cprimme(int basisSize, int i0, int blockSize,
      PRIMME_COMPLEX_FLOAT *H, int ldH, float *hVals, float *hSVals, PRIMME_COMPLEX_FLOAT *hVecs,
      int ldhVecs, int targetShiftIndex, int *arbitraryVecs,
      double smallestResNorm, int *flags, int RRForAll, PRIMME_COMPLEX_FLOAT *hVecsRot,
      int ldhVecsRot, double machEps, size_t *rworkSize, PRIMME_COMPLEX_FLOAT *rwork,
      int iworkSize, int *iwork, primme_params *primme);
#endif
