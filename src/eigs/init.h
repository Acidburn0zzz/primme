/*******************************************************************************
 *   PRIMME PReconditioned Iterative MultiMethod Eigensolver
 *   Copyright (C) 2015 College of William & Mary,
 *   James R. McCombs, Eloy Romero Alcalde, Andreas Stathopoulos, Lingfei Wu
 *
 *   This file is part of PRIMME.
 *
 *   PRIMME is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   PRIMME is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef init_H
#define init_H
#if !defined(CHECK_TEMPLATE) && !defined(init_basis_Sprimme)
#  define init_basis_Sprimme CONCAT(init_basis_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(init_basis_Rprimme)
#  define init_basis_Rprimme CONCAT(init_basis_,REAL_SUF)
#endif
int init_basis_dprimme(double *V, int64_t nLocal, int64_t ldV,
      double *W, int64_t ldW, double *evecs, int64_t ldevecs,
      double *evecsHat, int64_t ldevecsHat, double *M, int ldM, double *UDU,
      int ldUDU, int *ipivot, double machEps, double *rwork, size_t *rworkSize,
      int *basisSize, int *nextGuess, int *numGuesses, double *timeForMV,
      primme_params *primme);
int init_basis_zprimme(PRIMME_COMPLEX_DOUBLE *V, int64_t nLocal, int64_t ldV,
      PRIMME_COMPLEX_DOUBLE *W, int64_t ldW, PRIMME_COMPLEX_DOUBLE *evecs, int64_t ldevecs,
      PRIMME_COMPLEX_DOUBLE *evecsHat, int64_t ldevecsHat, PRIMME_COMPLEX_DOUBLE *M, int ldM, PRIMME_COMPLEX_DOUBLE *UDU,
      int ldUDU, int *ipivot, double machEps, PRIMME_COMPLEX_DOUBLE *rwork, size_t *rworkSize,
      int *basisSize, int *nextGuess, int *numGuesses, double *timeForMV,
      primme_params *primme);
int init_basis_sprimme(float *V, int64_t nLocal, int64_t ldV,
      float *W, int64_t ldW, float *evecs, int64_t ldevecs,
      float *evecsHat, int64_t ldevecsHat, float *M, int ldM, float *UDU,
      int ldUDU, int *ipivot, double machEps, float *rwork, size_t *rworkSize,
      int *basisSize, int *nextGuess, int *numGuesses, double *timeForMV,
      primme_params *primme);
int init_basis_cprimme(PRIMME_COMPLEX_FLOAT *V, int64_t nLocal, int64_t ldV,
      PRIMME_COMPLEX_FLOAT *W, int64_t ldW, PRIMME_COMPLEX_FLOAT *evecs, int64_t ldevecs,
      PRIMME_COMPLEX_FLOAT *evecsHat, int64_t ldevecsHat, PRIMME_COMPLEX_FLOAT *M, int ldM, PRIMME_COMPLEX_FLOAT *UDU,
      int ldUDU, int *ipivot, double machEps, PRIMME_COMPLEX_FLOAT *rwork, size_t *rworkSize,
      int *basisSize, int *nextGuess, int *numGuesses, double *timeForMV,
      primme_params *primme);
#endif
